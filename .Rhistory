mh.data$Percent[51]=42.1
mh.data=filter(mh.data,State!="District of Columbia")
write.csv(mh.data,"mh.data.csv")
}
mh.data=read.csv("mh.data.csv",stringsAsFactors = FALSE)%>%
clean_names()%>%
select(-x)%>%
left_join(states, by = c("state"="state.name"))%>%
select(-state)%>%
rename(state = state.abb)
# Chunk 8: CDC survey data
# questions
qns = c("qn13","qn14","qn15","qn16","qn17","qn18","qn19","qn20","qn24","qn25","qn26","qn27","qn28","qn29","qn30","qnbullyweight","qnbullygay")
# paricitpating states
sts = yrbss::getListOfParticipatingStates()
# years in data
yrs = c(1991,1993,1995,1997,1999,2001,2003,2005,2007,2009,2011,2013,2015)
if(import_raw_data){
# make data frame to store values
bullying = data.frame(variable = NULL, state = NULL, year = NULL, prop= NULL, ciLB= NULL, ciUB = NULL, n = NULL)
# run over all questions, states, and years
for(v in qns){
for(s in sts){
for(y in yrs ){
p = yrbss::getProportionSingleVariable(.variable = v, .location = s, .year = y, .level = 0.95)$prop
ciL = yrbss::getProportionSingleVariable(.variable = v, .location = s, .year = y, .level = 0.95)$ciLB
ciU = yrbss::getProportionSingleVariable(.variable = v, .location = s, .year = y, .level = 0.95)$ciUB
sample_size = yrbss::getProportionSingleVariable(.variable = v, .location = s, .year = y, .level = 0.95)$n
newrow = data.frame(variable = v, state = s, year = y, prop= p, ciLB= ciL, ciUB = ciU, n = sample_size)
bullying = bind_rows(bullying,newrow)}
}}
# incorporate labels for questions (what the question actually is)
lab = data.frame(question = yrbss::yrbss_questions_binary$variable, label = yrbss::yrbss_questions_binary$label)%>%
filter(question %in% qns)
bullying = left_join(bullying,lab, by = c(variable = "question"))
# clean Arizona label
bullying$state[which(bullying$state=="AZB")]="AZ"
# write cleaned csv file
write_csv(bullying, "bullying_survey.csv")
}
# incorporate labels for questions (what the question actually is)
lab = data.frame(question = yrbss::yrbss_questions_binary$variable, label = yrbss::yrbss_questions_binary$label)%>%
filter(question %in% qns)
# read in csv
bullying_survey = read_csv("bullying_survey.csv")
# Make combined variables for survey questions (specified in text above)
# combine suicide questions
suicide = data.frame(year = NULL, state = NULL, score = NULL, n = NULL)
suicide_qns = bullying_survey%>%
filter(variable %in% c("qn26","qn27","qn28","qn29","qn30"))
sts[which(sts=="AZB")]="AZ"
for(y in yrs){
for(st in sts){
dat = filter(suicide_qns,(year ==y & state == st))
# score is weighted average of proportions (weighted by number of respondents)
suicide_score = weighted.mean(dat$prop,(dat$n/sum(dat$n)), na.rm = TRUE)
samp = mean(dat$n,na.rm = TRUE)
newrow = data.frame(year = y, state = st, score = suicide_score, n = samp)
suicide = bind_rows(suicide,newrow)
}
# combine questions involving physical fights
fight = data.frame(year = NULL, state = NULL, score = NULL, n = NULL)
fight_qns = bullying_survey%>%
filter(variable %in% c("qn18","qn19","qn20"))
for(y in yrs){
for(st in sts){
dat = filter(fight_qns,(year ==y & state == st))
# score is weighted average of proportions (weighted by number of respondents)
fight_score = weighted.mean(dat$prop,(dat$n/sum(dat$n)),, na.rm = TRUE)
samp = mean(dat$n,na.rm = TRUE)
newrow = data.frame(year = y, state = st, score = fight_score, n = samp)
fight = bind_rows(fight,newrow)
}
# school safety questions
safety = data.frame(year = NULL, state = NULL, score = NULL, n = NULL)
safety_qns = bullying_survey%>%
filter(variable %in% c("qn13","qn14","qn15","qn16","qn17"))
for(y in yrs){
for(st in sts){
dat = filter(safety_qns,(year ==y & state == st))
# score is weighted average of proportions (weighted by number of respondents)
safety_score = weighted.mean(dat$prop,(dat$n/sum(dat$n)), na.rm = TRUE)
samp = mean(dat$n,na.rm = TRUE)
newrow = data.frame(year = y, state = st, score = safety_score, n = samp)
safety = bind_rows(safety,newrow)
}
# bullying questions
bull = data.frame(year = NULL, state = NULL, score = NULL, n = NULL)
bully_qns = bullying_survey%>%
filter(variable %in% c("qn24","qn25","qnbullyweight","qnbullygay"))
for(y in yrs){
for(st in sts){
dat = filter(bully_qns,(year ==y & state == st))
# score is weighted average of proportions (weighted by number of respondents)
bully_score = weighted.mean(dat$prop,(dat$n/sum(dat$n)), na.rm = TRUE)
samp = mean(dat$n,na.rm = TRUE)
newrow = data.frame(year = y, state = st, score = bully_score, n = samp)
bull = bind_rows(bull,newrow)
}
# create table with new variables
survey_combined = bind_cols(suicide,safety, fight, bull)%>%
select(year, state, score, n, score1, n1, score2, n2, score3, n3)%>%
rename(suicide_score = score, school_safety_score = score1, fight_score = score2, bully_score = score3)%>%
filter(year>=2007)%>%
full_join(st_yr%>%filter(year>=2007))%>%
arrange(year)%>%
arrange(state)%>%
mutate(state = ifelse(state == "AZB","AZ",state))
# impute values
# average value of previous and next year (for years with such data)
# for 2016-2019 predict value from line between 2014 and 2015 points
survey_combined = survey_combined%>%
group_by(state)%>%
mutate(suicide_score =ifelse(year<2016,ifelse(is.na(suicide_score), na.locf(suicide_score)/2+na.locf(suicide_score, fromLast = TRUE)/2,suicide_score),
NA ))%>%
mutate(school_safety_score =ifelse(year<2016,ifelse(is.na(school_safety_score), na.locf(school_safety_score)/2+na.locf(school_safety_score, fromLast = TRUE)/2,school_safety_score),NA))%>%
mutate(fight_score =ifelse(year<2016,ifelse(is.na(fight_score), na.locf(fight_score)/2+na.locf(fight_score, fromLast = TRUE)/2,fight_score),NA))%>%
mutate(bully_score =ifelse(year<2016,ifelse(is.na(bully_score), na.locf(bully_score)/2+na.locf(bully_score, fromLast = TRUE)/2,bully_score),NA))%>%
mutate(n=ifelse(year<2016,ifelse(is.na(n), na.locf(n)/2+na.locf(n, fromLast = TRUE)/2,n),NA))%>%
mutate(n1=ifelse(year<2016,ifelse(is.na(n1), na.locf(n1)/2+na.locf(n1, fromLast = TRUE)/2,n1),NA))%>%
mutate(n2=ifelse(year<2016,ifelse(is.na(n2), na.locf(n2)/2+na.locf(n2, fromLast = TRUE)/2,n2),NA))%>%
mutate(n3=ifelse(year<2016,ifelse(is.na(n3), na.locf(n3)/2+na.locf(n3, fromLast = TRUE)/2,n3),NA))
# use fitted line to get 2016-2019 values
for(s in sts[which(!(sts %in% c("MA","AZB","DC")))]){
dat = filter(survey_combined, state ==s)
ind = which(is.na(dat$suicide_score))[1]
slp = dat[(ind-1),3:10]-dat[(ind-2),3:10]
dat[which(is.na(dat$suicide_score))[1],3:10] =  dat[(ind-1),3:10]+as.numeric(dat[which(is.na(dat$suicide_score))[1],1]-2015)*slp
survey_combined[which(survey_combined$state == s),]=dat
}
# chech to see if mean and median are different
med_mn = survey_combined%>%
group_by(year)%>%
summarise(med_ss = median(suicide_score, na.rm = T), mn_ss = mean(suicide_score, na.rm = T),
med_safe = median(school_safety_score, na.rm = T), mn_safe = mean(school_safety_score, na.rm = T),
med_f = median(fight_score, na.rm = T), mn_f = mean(fight_score, na.rm = T),
med_b = median(bully_score, na.rm = T), mn_b = mean(bully_score, na.rm = T))
# impute missing values with median value for each column
survey_combined = survey_combined%>%
ungroup()%>%
group_by(year)%>%
mutate(suicide_score = ifelse(is.na(suicide_score), median(suicide_score, na.rm = T),suicide_score))%>%
mutate(school_safety_score = ifelse(is.na(school_safety_score), median(school_safety_score, na.rm = T),school_safety_score))%>%
mutate(fight_score = ifelse(is.na(fight_score), median(fight_score, na.rm = T),fight_score))%>%
mutate(bully_score = ifelse(is.na(bully_score), median(bully_score, na.rm = T),bully_score))%>%
mutate(n = ifelse(is.na(n), median(n, na.rm = T),n))%>%
mutate(n1 = ifelse(is.na(n1), median(n1, na.rm = T),n1))%>%
mutate(n2 = ifelse(is.na(n2), median(n2, na.rm = T),n2))%>%
mutate(n3 = ifelse(is.na(n3), median(n3, na.rm = T),n3))%>%
mutate(school_safety_score = ifelse(school_safety_score<0,0,school_safety_score))%>%
mutate(fight_score = ifelse(fight_score<0,0,fight_score))
# Chunk 9: load and clean poverty data
# read in poverty data
pov=read.csv("census_poverty_data.csv",stringsAsFactors = FALSE)
pov=filter(pov,State!="      United States"&State!="     United States"& State!="District of Columbia"&State!="United States")
names(pov)[1:2]<-c("state","poverty")
names(pov)[4]<-"year"
skel=expand_grid(sort(unique(pov$state)),min(pov$year):(max(pov$year)+2))
names(skel)<-c("state","year")
# Each data point is a three-year average. We assign this average to all years which were combined to make the three year average
sk1=filter(skel,year==2007|year==2008|year==2009)
sk1=left_join(sk1,filter(pov,year==2007),by="state")
sk2=filter(skel,year==2010|year==2011|year==2012)
sk2=left_join(sk2,filter(pov,year==2010),by="state")
sk3=filter(skel,year==2013|year==2014|year==2015)
sk3=left_join(sk3,filter(pov,year==2013),by="state")
sk4=filter(skel,year==2016|year==2017|year==2018)
sk4=left_join(sk4,filter(pov,year==2016),by="state")
pov=rbind(sk1,sk2,sk3,sk4)
pov=pov[,1:3]
names(pov)<-c("state","year","poverty")
# Chunk 10: bullying law data
bully = read_csv("State_bullying.csv")%>%
select(c(total_score,state.abb))%>%
rename(state = state.abb)%>%
mutate(year = 2010)
# Chunk 11: load and clean media data
media = read_csv("media_data.csv")%>%
separate(`Year-Month`, into = c("year","month"), sep = "-")%>%
clean_names()%>%
select(-starts_with("x"))%>%
group_by(year) %>%
mutate(yearly_articles = sum(articles_shootings_excluding_firearm_laws_and_regulations))%>%
mutate(yearly_shootings = sum(mass_shooting))%>%
mutate(art_per_inc = yearly_articles/yearly_shootings)%>%
ungroup()%>%
mutate(prev_month_art = c(0,articles_shootings_excluding_firearm_laws_and_regulations[1:227]))%>%
mutate(prev_year_art = c(rep(0,12),yearly_articles[1:216]))%>%
mutate(year = as.numeric(year))
# Chunk 12: load and clean population data
if(import_raw_data){
# 1980-1990
pop8090_raw = read.delim("https://www2.census.gov/programs-surveys/popest/tables/1980-1990/state/asrh/st8090ts.txt" )%>%data.frame()
pop8090_raw = pop8090_raw[c(8:58,64:114),]%>%data.frame()
colnames(pop8090_raw)="var"
pop8090 = data.frame(pop8090_raw$var[1:51],pop8090_raw$var[52:102])
colnames(pop8090)=c("var1","var2")
pop8090 = pop8090%>%
separate(var1, c("state",as.character(seq(1980,1984,by = 1))), extra = "merge")%>%
separate(var2, c("state1",as.character(seq(1985,1990,by = 1))), extra = "merge")%>%
select(c(state,starts_with("19")))
# 1970 - 1980
pop7080_raw = read.delim("https://www2.census.gov/programs-surveys/popest/tables/1980-1990/state/asrh/st7080ts.txt")
pop7080_raw = pop7080_raw[c(10:61,63:114),]%>%data.frame()
colnames(pop7080_raw)="var"
pop7080 = data.frame(pop7080_raw$var[1:51],pop7080_raw$var[53:103])
colnames(pop7080)=c("var1","var2")
pop7080 = pop7080%>%
separate(var1, c("blnk","id","state","1970","1971","1972","1973","1974","1975"), extra = "merge")%>%
separate(var2, c("blnk1","id1","state1",as.character(seq(1976,1980,by = 1))), extra = "merge")%>%
select(c(state,starts_with("19")))
# 1990-2000
pop90_00 = read_csv("../../data/pop_90-00.csv")%>%
rename(state = X1)%>%
select(c(state,3:13))%>%
filter(state != "USA")
colnames(pop90_00)[2:ncol(pop90_00)]=as.character(seq(1990,2000,by = 1))
pop90_00$state[30:35] = states$state.name[29:34]
pop90_00$state[40:42] = states$state.name[39:41]
pop90_00$state[9] = states$state.name[51]
pop90_00$state[49] = states$state.name[48]
# 2000-2010
pop00_10 = read.csv("https://www2.census.gov/programs-surveys/popest/datasets/2000-2010/intercensal/state/st-est00int-agesex.csv")%>%
clean_names()%>%
filter(sex == 0, age == 999)%>%
select(c(name,starts_with("popestimate")))%>%
rename_at(vars(starts_with("popestimate")),funs(substr(.,start = 12, stop = 15)))%>%
rename(state = name)%>%
mutate(state = as.character(state))%>%
mutate(state = ifelse(state=="District of Columbia",as.character(states$state.name[51]),state))%>%
filter(state != "United States")
# 2010-2018
pop10_18 = read_csv("../../data/pop_2010-2018.csv")
colnames(pop10_18)=pop10_18[1,]
pop10_18 = pop10_18%>%
slice(-1)%>%
rename_at(vars(starts_with("Pop")), funs(substr(.,start = 38,stop = 41)))%>%
rename(state = Geography)%>%
select(c(state,starts_with("20")))%>%
mutate(state = ifelse(state=="District of Columbia",as.character(states$state.name[51]),state))
# 2019
pop2019 = read_csv("../../data/2019pop.csv")%>%
clean_names()%>%
select(c(state,pop))%>%
rename("2019"=pop)
# combine all data
pops = left_join(pop7080,pop8090%>%select(-c("1980")), by = "state")%>%
left_join(states,by = c("state"="state.abb"))%>%
mutate(state = state.name)%>%
select(-state.name)%>%
left_join(pop90_00%>%select(-c("1990")), by = "state")%>%
left_join(pop00_10%>%select(-c("2000")), by = "state")%>%
left_join(pop10_18%>%select(-c("2010")), by = "state")%>%
left_join(pop2019,by = "state")%>%
gather(key = "year", value = "population", c(2:51))
# write cleaned csv file
write.csv(pops, "state_populations.csv")
}
# read in population data (include abbreviated and full state name)
pops = read_csv("state_populations.csv")%>%
select(-X1)%>%
left_join(states, by = c("state"="state.name"))
# Chunk 13: count format
# data set aggrgated by state and year
ss_counts = ss%>%
group_by(state,year) %>%
summarize(incident_count = n(),
total_victims = sum(total_injured_killed_victims), #include possible secondary outcomes
total_fatalities = sum(killed_includes_shooter),
total_wounded = sum(wounded),
avg_victims = mean(total_injured_killed_victims),
avg_fatalities = mean(killed_includes_shooter),
ave_wounded = mean(wounded),
avg_shooter_age = mean(shooter_age),
max_shooter_age = max(shooter_age),
min_shooter_age = min(shooter_age),
avg_reliability = mean(reliability_score_1_5),
target = mean(ifelse(targeted_specific_victim_s=="Y",1,
ifelse(targeted_specific_victim_s=="N",0,NA)),na.rm = T),
random_vict = mean(ifelse(random_victims=="Y",1,
ifelse(random_victims=="N",0,NA)),na.rm = T),
bullied = mean(ifelse(bullied_y_n_n_a=="Y",1,
ifelse(bullied_y_n_n_a=="N",0,NA)),na.rm = T),
domestic_violence = mean(ifelse(domestic_violence_y_n=="Y",1,
ifelse(domestic_violence_y_n=="N",0,NA)),na.rm = T))%>%
mutate(in_ss = TRUE)%>%
full_join(st_yr, by = c("state","year"))%>%
left_join(pops%>%rename(full_state_name = state), by = c("state"="state.abb", "year"))%>%
mutate(incident_count = ifelse(is.na(incident_count),0,incident_count))%>%
mutate(in_ss = ifelse(is.na(in_ss),FALSE,in_ss))
# merge in grade data
ss_counts = ss_counts%>%
left_join(grades%>%select(state,grade,year),by = c("full_state_name"="state","year"))%>%
left_join(gpa_convert, by = c("grade"="letter_grade"))
# merge in media data
ss_counts = ss_counts%>%
left_join(media%>%select(prev_year_art, year,yearly_articles)%>%distinct(), by = "year")
# merge in poverty data
pov = left_join(pov,states, by = c("state"="state.name"))%>%
select(-state)%>%
rename(state = state.abb)
ss_counts = left_join(ss_counts, pov, by = c("state","year"))
# merge bullying data
ss_counts = left_join(ss_counts, bully%>%select(-year), by = "state")%>%
rename(bullying_score = total_score)%>%
mutate(bullying_score = as.numeric(bullying_score))
# merge mental health data
ss_counts = ss_counts%>%
left_join(mh.data, by = c("state","year"))%>%
rename(mh_score = percent)
# merge CDC survey data
ss_counts = left_join(ss_counts, survey_combined, by = c("state","year"))%>%
filter(state != "DC")
# merge RAND data
ss_counts = left_join(ss_counts,rand.count.data, by = c("state","year"))
# create new variables of law categories
# -1s are from after realizaing I accidentally marked permissive laws as positive and and restrictive laws as negative... whoops :)
ss_counts = ss_counts%>%
mutate(access_laws = -1*(age_permissive-age_restrictive+child_access_permissive-child_access_restrictive+prohibited_possessor_permissive-prohibited_possessor_restrictive))%>%
mutate(transport= -1*(castle_doctrine_permissive-castle_doctrine_restrictive+open_carry_permissive-open_carry_restrictive+carrying_permissive-carrying_permissive))%>%
mutate(screening = -1*(background_check_permissive- background_check_restrictive + waiting_period_permissive- waiting_period_restrictive + permit_permissive - permit_restrictive + registration_permissive - registration_restrictive + safety_training_permissive - safety_training_restrictive + dealer_license_permissive - dealer_license_restrictive + one_gun_per_permissive - one_gun_per_restrictive))%>%
mutate(ban = -ban_permissive+ban_restrictive)%>%
select(-c(36:63))
# Chunk 14: shootings over time
ss_counts%>%
group_by(year)%>%
summarise(ss = sum(incident_count))%>%
ggplot(aes(x = year, y = ss))+
geom_line(color = "red")+
labs(x = "Year", y = "School Shootings", title = "School Shootings in the U.S.")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
# Chunk 15
# This will handle the ordering
d <- ss_counts %>%
filter(year %in% seq(2012,2018,by=1))%>%
mutate(grade = substr(grade,1,1))%>%
ungroup() %>%   # As a precaution / handle in a separate .grouped_df method
arrange(year, grade) %>%   # arrange by facet variables and continuous values
mutate(.r = row_number()) # Add a row number variable
ggplot(d, aes(x = .r, y= incident_count, fill = grade)) +  # Use .r instead of x
geom_point(data = d%>%filter(incident_count==0),
aes(x = .r, y= incident_count, color = grade),
size = 0.7) +
geom_bar(stat = "identity")+
facet_wrap(~ year, scales = "free_x") +  # Should free scales (though could be left to user)
scale_x_continuous(  # This handles replacement of .r for x
breaks = d$.r,     # notice need to reuse data frame
labels = d$state
)+
labs(title = "Incident Count by Grade", x = "State", y = "School Shootings")+
scale_fill_viridis_d( name = "Grade", direction = -1)+
scale_color_viridis_d( guide = FALSE, direction = -1)+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3.5), legend.position = c(0.7,.15), legend.direction = "horizontal",legend.key.size = unit(1.5,"line"), legend.text = element_text(size = 8), legend.title = element_text(size = 10),plot.title = element_text(hjust = 0.5))
# Chunk 16: grade animation
# variable to create animations (takes a few seconds so I saved files in the directory rather than building them each time I knit the code)
build_animations = FALSE
if(build_animations){
# convert letter grade to gpa
grades = left_join(grades, gpa_convert, by = c("grade"="letter_grade"))
# get long/lat data
dat_loc= map_data("state")%>%
mutate(sts=toupper(region))
# merge data
b=full_join(grades%>%mutate(state = tolower(state)), dat_loc, by=c("state"="region"))
b = b%>%mutate(year = as.numeric(year))%>%filter(!is.na(year))%>%select(-subregion)
b = b[complete.cases(b),]
# create plot to animate
map_plts = ggplot(data = b, aes(x = long, y = lat, group = group))+
geom_polygon(aes(fill = gpa), color = "white")+
scale_fill_viridis(option = "D", name = "GPA")+
labs(title = "Grade Changes by Year", subtitle = 'Year: {frame_time}', x = NULL, y = NULL)+
theme_bw()+
theme(line = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), plot.title = element_text(hjust = 0.5))+
transition_time(year, range = c(2012,2018))
# run animation
animate(map_plts, nframes = 7, fps = 1)
# save as file to save time when running next time
anim_save("state_grade_animation.gif")
}
# Chunk 17: law animation
if(build_animations){
# long/lat data
dat_loc = left_join(dat_loc,states%>%mutate(state.name = tolower(state.name)), by = c("region"="state.name"))
b2=full_join(ss_counts%>%ungroup()%>%filter(year>=2007)%>%filter(!(state%in%c("AK","HI")))%>%select(state,year,access_laws,transport,screening,ban), dat_loc, by=c("state"="state.abb"))%>%
select(-subregion)%>%
gather(key = "law_class", value = "number_in_effect", c(3:6))
b2 = b2[complete.cases(b2),]
# facet labels for cleaner plots
law.labs <- c("Access Laws", "Bans","Screening Laws", "Transport Laws")
names(law.labs) <- c("access_laws", "ban","screening","transport")
# create plots for animation
map_plts_law = ggplot(data = b2, aes(x = long, y = lat, group = group))+
geom_polygon(aes(fill = number_in_effect), color = "white")+
scale_fill_viridis(option = "D", name = "Laws in\nEffect\n(R-P)")+
labs(title = "Law Changes by Year",subtitle = 'Year: {frame_time}', x = NULL, y = NULL)+
theme_bw()+
facet_wrap(.~law_class, labeller = labeller(law_class = law.labs))+
theme(line = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), plot.title = element_text(hjust = 0.5))+
transition_time(year, range = c(2007,2019))
# run animation
animate(map_plts_law, nframes = 13, fps = 1)
# save file
anim_save("state_law_animation.GIF")
}
# Chunk 18: media plots
# plot number of artciles per month over time
media%>%
mutate(date = as.Date(zoo::as.yearmon(paste(year,"-",month, sep = ""))))%>%
ggplot(aes(y = articles_shootings_excluding_firearm_laws_and_regulations, x= date, color = year))+
geom_point()+
geom_jitter()+
labs(y = "Monthly Articles",x =  "Year", title = "Media Coverage of Shootings", subtitle = "Articles in NYT and Washington Post Regarding Shootings")+
scale_color_viridis_c(name = "Year")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5, size = 8))
# plot school shooting counts per year colored by number of articles in previous year
ss_counts%>%
group_by(year)%>%
summarise(yearly_incidents = sum(incident_count), prev_year_art = prev_year_art[1] )%>%
filter(year %in% seq(1999,2017, by = 1))%>%
ggplot(aes(x = year, y = yearly_incidents, fill = prev_year_art))+geom_bar(stat = "identity")+
labs(y = "Yearly School Shootings", x = "Year", title = "Media Coverage Lag Effect")+
scale_fill_viridis(option = "D", name = "Articles in previous year")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
# variable to create animations (takes a few seconds so I saved files in the directory rather than building them each time I knit the code)
build_animations = FALSE
if(build_animations){
# convert letter grade to gpa
grades = left_join(grades, gpa_convert, by = c("grade"="letter_grade"))
# get long/lat data
dat_loc= map_data("state")%>%
mutate(sts=toupper(region))
# merge data
b=full_join(grades%>%mutate(state = tolower(state)), dat_loc, by=c("state"="region"))
b = b%>%mutate(year = as.numeric(year))%>%filter(!is.na(year))%>%select(-subregion)
b = b[complete.cases(b),]
# create plot to animate
map_plts = ggplot(data = b, aes(x = long, y = lat, group = group))+
geom_polygon(aes(fill = gpa), color = "white")+
scale_fill_viridis(option = "D", name = "GPA")+
labs(title = "Grade Changes by Year", subtitle = 'Year: {frame_time}', x = NULL, y = NULL)+
theme_bw()+
theme(line = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), plot.title = element_text(hjust = 0.5))+
transition_time(year, range = c(2012,2018))
# run animation
animate(map_plts, nframes = 7, fps = 1)
# save as file to save time when running next time
anim_save("state_grade_animation.gif")
}
# plot number of artciles per month over time
media%>%
mutate(date = as.Date(zoo::as.yearmon(paste(year,"-",month, sep = ""))))%>%
ggplot(aes(y = articles_shootings_excluding_firearm_laws_and_regulations, x= date, color = year))+
geom_point()+
geom_jitter()+
labs(y = "Monthly Articles",x =  "Year", title = "Media Coverage of Shootings", subtitle = "Articles in NYT and Washington Post Regarding Shootings")+
scale_color_viridis_c(name = "Year")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5, size = 8))
# plot school shooting counts per year colored by number of articles in previous year
ss_counts%>%
group_by(year)%>%
summarise(yearly_incidents = sum(incident_count), prev_year_art = prev_year_art[1] )%>%
filter(year %in% seq(1999,2017, by = 1))%>%
ggplot(aes(x = year, y = yearly_incidents, fill = prev_year_art))+geom_bar(stat = "identity")+
labs(y = "Yearly School Shootings", x = "Year", title = "Media Coverage Lag Effect")+
scale_fill_viridis(option = "D", name = "Articles in previous year")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
# retrieve origiial data without imputed data
survey_combined_raw = bind_cols(suicide,safety, fight, bull)%>%
select(year, state, score, n, score1, n1, score2, n2, score3, n3)%>%
rename(suicide_score = score, school_safety_score = score1, fight_score = score2, bully_score = score3)%>%
filter(year>=2007)%>%
full_join(st_yr%>%filter(year>=2007))%>%
arrange(year)%>%
arrange(state)%>%
mutate(state = ifelse(state == "AZB","AZ",state))
# cleaner facet labels
surv.labs = c("Bullying Score", "Physical Altercation Score", "School Danger Perception Score", "Suicidal Thoughts or Actions Score")
names(surv.labs)= c("bully_score", "fight_score", "school_safety_score","suicide_score")
# plot survey responses over time
survey_combined_raw%>%
gather(key = "score_type", value = "percent_yes", c(3,5,7,9))%>%
ggplot(aes(x = year, y = percent_yes, color = score_type))+
geom_point(position = "jitter")+
geom_smooth(se=F)+
scale_color_viridis_d(name = "Score Type", labels = c("Bullying\n","Involvment in \nPhysical Altercation\n","School Danger\nPerception\n","Suicidal \nThoughts/Actions\n"))+
xlim(2007,2015)+
labs(y = "% Responding Yes", x = "Year", title = "Survey Responses", subtitle = "(Aggregated Variables)")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5, size = 8))
# plot survey responses variation by state
survey_combined_raw%>%
gather(key = score_type, percent, c(3,5,7,9))%>%
ggplot(aes(x = state, y = percent, color = score_type ))+
geom_boxplot()+
scale_color_viridis_d()+
labs(title = "Survey Reponses by State", x = "State", y = "Percent Answering 'Yes'")+
facet_wrap(.~score_type,labeller = labeller(score_type = surv.labs))+
theme_bw()+
theme(legend.position = "none",axis.text.x = element_text(angle = 45, hjust = 1, size = 4.5),plot.title = element_text(hjust = 0.5))
mh.data=mh.data%>%clean_names()
ggplot(data=mh.data,mapping=aes(x=year,y=percent,col=state))+geom_line()
ggplot(data=mh.data,mapping=aes(x=year,y=percent,col=state,title="Percent of Youth Who Experienced an MDE and Did Not Receive Treatment"))+geom_line()
ggplot(data=mh.data,mapping=aes(x=year,y=percent,col=state,main="Percent of Youth Who Experienced an MDE and Did Not Receive Treatment"))+geom_line()
ggplot(data=mh.data,mapping=aes(x=year,y=percent,col=state))+geom_line()+labs(main="Percent of Youth Who Experienced an MDE and Did Not Receive Treatment")
ggplot(data=mh.data,mapping=aes(x=year,y=percent,col=state))+geom_line()+labs(title="Percent of Youth Who Experienced an MDE and Did Not Receive Treatment")
ggplot(data=mh.data,mapping=aes(x=year,y=percent,col=state))+geom_line()+labs(title="Percent of Youth Who Experienced an MDE and Did Not Receive Treatment",x="Year",y="Percent")
